#define _USE_MATH_DEFINES
#include "stdafx.h"
#include <gl\glut.h>
#include <stdlib.h>
#include <math.h>
#include <windows.h>
#include <stdio.h>
#include <float.h>
#define PI 3.1459
GLfloat R = 640.0 / 480; //Форматное соотношение
GLfloat w = 40;  //Ширина мирового окна
GLfloat h; //Высота мирового окна
GLfloat l, r, b, t; //Параметры мирового окна
GLint x = 0, y = 0, p = -1, m;
void init(void)
{
	l = -50, r = 50, b = -(r - l) * 480 / (2 * 640), t = (r - l) * 480 / (2 * 640);
	glClearColor(1.0f, 1.0f, 1.0f, 1.0); //фоновый цвет
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(l, r, b, t);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void reshape(GLsizei W, GLsizei H)
{
	if (R>W / H) glViewport(0, 0, W, W / R);
	else glViewport(0, 0, H*R, H);
}

void showAxis(void)			//оси координат
{
	glColor3f(0.0f, 0.0f, 1.0f);
	glBegin(GL_LINES);
	glVertex2f(0, b);
	glVertex2f(0, t);
	glVertex2f(l, 0);
	glVertex2f(r, 0);
	glEnd();
}

void scene(void)
{
	glClear(GL_COLOR_BUFFER_BIT);

	glViewport(0, 0, 640, 480);

	showAxis();
	glColor3f(0.0, 1.0, 0.0);


	glBegin(GL_LINE_STRIP);

	for (m = 1; m <= 10; m++)
	{
		while ((x <= 1 * m) && (y <= 2 * p*m))
		{
			if ((y - 2 * p*x) < 0)
			{
				glVertex2i(x, y);
				y += 1;
			}
			else if ((y - 2 * p*x) == 0)
			{
				glVertex2i(x, y);
				if (1 >= 2 * p) { x += 1; }
				else { y += 1; }
			}
			else
			{
				glVertex2i(x, y);
				x += 1;
			}
		}
		y -= 1;
	}
	glEnd();

	x = y = 0;

	glBegin(GL_LINE_STRIP);

	for (m = 1; m <= 10; m++)
	{
		while ((x >= -1 * m) && (y >= -2 * p*m))
		{
			if ((y - 2 * p*x) < 0)
			{
				glVertex2i(x, y);
				x -= 1;
			}
			else if ((y - 2 * p*x) == 0)
			{
				glVertex2i(x, y);
				if (1 >= 2 * p) { y -= 1; }
				else { x -= 1; }
			}
			else
			{
				glVertex2i(x, y);
				y -= 1;
			}
		}
	}
	glEnd();


	glBegin(GL_LINE_STRIP);

	for (m = 1; m <= 15; m++)
	{
		while ((x <= 1 * m) && (y >= 2 * p*m))
		{
			if ((y - 2 * p*x) < 0)
			{
				glVertex2i(x, y);
				x += 1;
			}
			else if ((y - 2 * p*x) == 0)
			{
				glVertex2i(x, y);
				if (1 >= 2 * p) { x += 1; }
				else { y -= 1; }
			}
			else
			{
				glVertex2i(x, y);
				y -= 1;
			}
		}
	}
	glEnd();

	x = y = 0;

	glBegin(GL_LINE_STRIP);

	for (m = 1; m <= 15; m++)
	{
		while ((x >= -1 * m) && (y <= -2 * p*m))
		{
			if ((y - 2 * p*x) < 0)
			{
				glVertex2i(x, y);
				y += 1;
			}
			else if ((y - 2 * p*x) == 0)
			{
				glVertex2i(x, y);
				if (1 >= 2 * p) { x -= 1; }
				else { y += 1; }
			}
			else
			{
				glVertex2i(x, y);
				x -= 1;
			}
		}
	}
	glEnd();


	glColor3f(0.0f, 0.0f, 1.0f);
	float xi = 0, yi = 0;
	int X = 0, Y = 0;

	glBegin(GL_LINE_STRIP);

	for (int h = 0; h < 50; h++)
	{

		glVertex2i(X, Y);
		yi += 2 * p / pow(4 * p*p + 1, 0.5);
		Y = floorf(yi);
		xi += 1 / pow(4 * p*p + 1, 0.5);
		X = floorf(xi);


		printf("%d  %d\n", X, Y);

	}
	glEnd();

	glColor3f(0.0f, 0.0f, 1.0f);//ЦДА

	xi = 0, yi = 0;
	X = floorf(xi); Y = floorf(yi);

	glBegin(GL_LINE_STRIP);

	for (int h = 0; h < 50; h++)
	{

		glVertex2i(X, Y);
		yi -= 2 * p / pow(4 * p*p + 1, 0.5);
		Y = floorf(yi);
		xi -= 1 / pow(4 * p*p + 1, 0.5);
		X = floorf(xi);


		printf("%d  %d\n", X, Y);

	}
	glEnd();


	glFlush();
	glutSwapBuffers();

}

void main(int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(640, 480);
	glutInitWindowPosition(20, 20);
	glutCreateWindow("Myprog");
	glutReshapeFunc(reshape);
	glutDisplayFunc(scene);
	//glutIdleFunc(scene);
	init();
	glutMainLoop();
}