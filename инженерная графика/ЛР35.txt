#include "stdafx.h"
#include <gl\glut.h>
#include <math.h>
#include <Windows.h>
#include <iostream>
GLfloat angle = 0;
GLdouble zNear = 1, zFar = 10, x = 2, y = 2, z = 2; int f = 45; float a = 0.5, b = 1, c = 1; bool flag = false;
void init(void)
{
	glClearColor(1.0, 1.0, 0.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60, 1, zNear, zFar);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}
void myDisplay()
{
	glPushMatrix(); //Сохраняем VM = 1
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);
	gluLookAt(x* cosf(f), y * sinf(f), z, x - 2, y - 2, z - 2, 0, 1, 0); // VM=Fwe
	GLfloat myLightPosition[] = { 3.0, 3.0, 3.0, 1.0 }; // Источник света в CKw
	glLightfv(GL_LIGHT0, GL_POSITION, myLightPosition); /*Позиция ис-точника света будет преобразована в CKe*/
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glPushMatrix(); //Сохраняем VM=Fwe
	glRotatef(angle, 1, 0, 0);
	glRotatef(angle, 0, 1, 0);
	glScalef(a, 0.5, 0.5);
	glutSolidDodecahedron();
	glPopMatrix(); // Восстанавливаем VM=Fwe
	glDisable(GL_LIGHTING); //Выключаем освещение
	glBegin(GL_LINES);
	glColor3f(1, 0, 0); glVertex3f(0, 0, 0); glVertex3f(1, 0, 0);
	glColor3f(0, 1, 0); glVertex3f(0, 0, 0); glVertex3f(0, 1, 0);
	glColor3f(0, 0, 1); glVertex3f(0, 0, 0); glVertex3f(0, 0, 1);
	glEnd();
	glBegin(GL_LINES);
	glColor3f(1, 1, 1); glVertex3f(3, 3, 3); glVertex3f(0.0, 0.0, 0.0);
	glEnd();
	glPopMatrix();
	glutSwapBuffers();
}
void myReshape(int width, int height)
{
	if (width / height<1) glViewport(0, 0, width, width);
	else glViewport(0, 0, height, height);
}
void myIdle()
{
	if (flag){
		angle += 0.5;
		if (angle > 360.0) angle = 0;
		glutPostRedisplay();
	}
	Sleep(20);
}

void myKey(unsigned char key, int d, int g){
	switch (key){
	case 'X':a -= 0.1; break; 
	case 'x':a += 0.1; break;
	}
	glutPostRedisplay();
}

void myMouse(int button, int state,int x,int y){
	if (state == GLUT_UP){
		switch (button){
		case GLUT_LEFT_BUTTON:flag=true; break;
		case GLUT_RIGHT_BUTTON:flag=false; break;
		}
	}
	glutPostRedisplay();
}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(800, 800);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("my window");
	glutDisplayFunc(myDisplay);
	glutReshapeFunc(myReshape);
	glutKeyboardFunc(myKey);
	glutMouseFunc(myMouse);
	glutIdleFunc(myIdle);
	init();
	glutMainLoop();
}
