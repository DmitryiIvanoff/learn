#define _USE_MATH_DEFINES
#include "stdafx.h"
#include <gl\glut.h>
#include <stdlib.h>
#include <math.h>
#include <windows.h>
#include <stdio.h>
#include <float.h>
#include <iostream>
#define PI 3.1459
GLfloat R = 640.0 / 480; //Форматное соотношение
GLfloat w = 40;  //Ширина мирового окна
GLfloat h; //Высота мирового окна
GLfloat l, r, b, t; //Параметры мирового окна
GLint x = 0, y = 0, m, a = 1, bc = 2;
void init(void)
{
	l = -50, r = 50, b = -(r - l) * 480 / (2 * 640), t = (r - l) * 480 / (2 * 640);
	glClearColor(1.0f, 1.0f, 1.0f, 1.0); //фоновый цвет
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(l, r, b, t);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void reshape(GLsizei W, GLsizei H)
{
	if (R>W / H) glViewport(0, 0, W, W / R);
	else glViewport(0, 0, H*R, H);
}

void showAxis(void)			//оси координат
{
	glColor3f(0.0f, 0.0f, 1.0f);
	glBegin(GL_LINES);
	glVertex2f(0, b);
	glVertex2f(0, t);
	glVertex2f(l, 0);
	glVertex2f(r, 0);
	glEnd();
}

void scene(void)
{
	glClear(GL_COLOR_BUFFER_BIT);

	glViewport(0, 0, 640, 480);

	showAxis();
	glColor3f(0.0, 1.0, 0.0);
	//Метод оценочной функции
	//1 четверть
	glBegin(GL_LINE_STRIP);
	for (m = 0; m <= 50; m++)
	{
		while ((x <= 1 * m) && (pow((double)y, 2) - (a * m*y + bc) <= 0))
		{
			if ((pow((double)y, 2) - a*x*y - bc) < 0)
			{
				glVertex2i(x, y);
				y += 1;
			}
			else if ((pow((double)y, 2) - a * x*y - bc) == 0)
			{
				glVertex2i(x, y);
				if (1 >= x * a) { x += 1; }
				else { y += 1; }
			}
			else
			{
				glVertex2i(x, y);
				x += 1;
			}
		}
		y -= 1;
	}
	glEnd();

	x = y = 0;
	//3 четверть
	glBegin(GL_LINE_STRIP);

	for (m = 0; m <= 50; m++)
	{
		while ((x >= -1 * m) && (pow((double)y, 2) - ((a * m*y + bc) >= 0)))
		{
			//std::cout << x<<" "<<y<<" NNN ";
			if ((pow((double)y, 2) - a * x*y - bc) < 0)
			{
				glVertex2i(x, y);
				y -= 1;
			}
			else if ((pow((double)y, 2) - a * x*y - bc) == 0)
			{
				//system("pause");
				glVertex2i(x, y);
				if (1 >= x * a) { x -= 1; }
				else { y -= 1; }
			}
			else
			{
				//system("pause");
				glVertex2i(x, y);
				x -= 1;
			}
		}
	}
	glEnd();


	//2 четверть
	glBegin(GL_LINE_STRIP);

	for (m = 1; m <= 50; m++)
	{
		while ((x <= -1 * m) && (pow((double)y, 2) - (a * m*y + bc) <= 0))
		{
			//std::cout << x << " " << y << " NNN ";
			if ((pow((double)y, 2) - a * x*y - bc) < 0)
			{
				glVertex2i(x, y);
				x += 1;
			}
			else if ((pow((double)y, 2) - a * x*y - bc) == 0)
			{
				glVertex2i(x, y);
				if (1 >= x * a) { x += 1; }
				else { y -= 1; }
			}
			else
			{
				glVertex2i(x, y);
				y -= 1;
			}
		}
	}
	glEnd();

	x = y = 0;
	//bc четверть
	glBegin(GL_LINE_STRIP);
	for (m = 1; m <= 50; m++)
	{
		while ((x >= -1 * m) && (pow((double)y, 2) - (a * m*y + bc) >= 0))
		{
			//std::cout << x << " " << y << " NNN ";
			if ((pow((double)y, 2) - a * x*y - bc) < 0)
			{
				glVertex2i(x, y);
				y += 1;
			}
			else if ((pow((double)y, 2) - a * x*y - bc) == 0)
			{
				glVertex2i(x, y);
				if (1 >= x * a) { x -= 1; }
				else { y += 1; }
			}
			else
			{
				glVertex2i(x, y);
				x -= 1;
			}
		}
	}
	glEnd();
	//ЦДА
	glColor3f(1.0f, 0.0f, 0.0f);
	float dx = 1, dy = 1;
	int X = 1, Y = 1;
	//2
	glBegin(GL_LINE_STRIP);
	for (int h = 0; h < 50; h++)
	{
		glVertex2i(X, Y);
		dy += (float)(2 * Y - a * X) / (float)pow((float)(pow((float)(2 * Y - a * X), 2) + pow((float)(-a*Y), 2)), 0.5);
		Y = floorf(dy);
		dx += -(float)(-a*Y) / (float)pow((float)(pow((float)(2 * Y - a * X), 2) + pow((float)(-a*Y), 2)), 0.5);
		//std::cout << x << " " << y << " NNN ";
		X = floorf(dx);
	}
	glEnd();

	dx = -1, dy = -1;
	X = floorf(dx); Y = floorf(dy);

	glBegin(GL_LINE_STRIP);
	//1
	for (int h = 0; h < 50; h++)
	{
		glVertex2i(X, Y);
		dy += (float)(2 * Y - a * X) / (float)pow((float)(pow((float)(2 * Y - a * X), 2) + pow((float)(-a*Y), 2)), 0.5);
		Y = floorf(dy);
		dx += -(float)(-a*Y) / (float)pow((float)(pow((float)(2 * Y - a * X), 2) + pow((float)(-a*Y), 2)), 0.5);
		std::cout << dx << " " << dy << " NNN ";
		X = floorf(dx);
		//std::cout << Y << " " << X << " NNN ";
	}
	glEnd();
	glFlush();
	glutSwapBuffers();
	float x = y = 1;
	x += (float)(-3) / pow((float)34, 0.5);
}

void main(int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(640, 480);
	glutInitWindowPosition(20, 20);
	glutCreateWindow("Myprog");
	glutReshapeFunc(reshape);
	glutDisplayFunc(scene);
	//glutIdleFunc(scene);
	init();
	glutMainLoop();
}